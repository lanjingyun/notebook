import { useEffect, useState } from "react"
import gfm from 'remark-gfm'
import rehypeRaw from 'rehype-raw'
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import s from '@/styles/index.module.less'
import Head from "next/head"
import { serchParams } from "luxi-record-utils"
import { request } from "@/utils"
import { message } from "antd"

export default function Blogs() {
    const [data, setData] = useState<string>('')
    const [style, setStyle] = useState<any>({})
    useEffect(() => {
        getFile()
        importStyle()
    }, [])
    const getFile = () => {
        const fileName = serchParams('fileName') as string
        request.post('/blogDetail', {data: {fileName: decodeURI(fileName)}}).then((res: response) => {
            if(res.success) {
                setData(res.data)
            }  else {
                message.error('文件获取失败')
            }
        })
    }
    const importStyle = async () => {
        const module = await import('react-syntax-highlighter/dist/esm/styles/prism')
        setStyle(module.vscDarkPlus)
    }
    return (
        <div className={s.md}>
            <Head>
                <title>阿sir's Book</title>
                <meta content="width=device-width, initial-scale=1" name="viewport" />
                <meta name="description" content="Generated by gzq" />
                <link rel="icon" href="/favicon.svg" />
            </Head>
            <ReactMarkdown
                remarkPlugins={[gfm]}
                rehypePlugins={[rehypeRaw]}
                components={{
                    code({ node, inline, className, children, ...props }) {
                        const match = /language-(\w+)/.exec(className || '');
                        return !inline && match ? (
                            <SyntaxHighlighter
                                showLineNumbers={true}
                                style={style}
                                language={match[1]}
                                PreTag='div'
                                {...props}
                            >
                                {String(children).replace(/\n$/, '')}
                            </SyntaxHighlighter>
                        ) : (
                            <code className={className} {...props}>
                                {children}
                            </code>
                        );
                    }
                }}
            >
                {data}
            </ReactMarkdown>
        </div>
    )
}

// export async function getStaticProps({ params }) {
//     const { id } = params
//     if (!id) {
//         return {
//             notFound: true
//         }
//     }
//     const res = await fetch(`http://127.0.0.1:3030/api/blog/desc?id=${id}`)
//     const { data } = await res.json()
//     return {
//         props: {
//             data: data
//         }
//     }
// }

// export async function getStaticPaths() {
//     const res = await fetch('http://127.0.0.1:3000/api/hello')
//     console.log(res)
//     const { data } = await res.json()
//     return {
//         paths: data.map((list) => {
//             return { params: { id: list._id } } //id文件名的中括号里也必须是id
//         }),
//         fallback: false // false表示没找到就返回404，true相反
//     }

// }